import React from 'react'
import { Alert, KeyboardAvoidingView, ScrollView, Text, TouchableHighlight } from 'react-native'
import { connect } from 'react-redux'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'
import { Actions as NavigationActions } from 'react-native-router-flux'

import t from 'tcomb-form-native'

// Styles
import styles from './Styles/<%= props.name %>EntityEditScreenStyle'

let Form = t.form.Form

class <%= props.name %>EntityEditScreen extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      formModel: t.struct({
        id: t.Number,
        <%_ props.entityConfig.fields.forEach(function (field, index) {
            // todo handle enums, required, constraints, relationships
          if (field.fieldType === 'Integer'
            || field.fieldType === 'Long'
            || field.fieldType === 'Float'
            || field.fieldType === 'Decimal'
            || field.fieldType === 'Double'
            || field.fieldType === 'BigDecimal') {
        _%>
        <%= field.fieldName %>: t.maybe(t.Number)<% if (index !== props.entityConfig.fields.length -1) { %>,<% } %>
        <%_ } else if (field.fieldType === 'LocalDate'
        || field.fieldType === 'Instant'
        || field.fieldType === 'ZonedDateTime') { _%>
        <%= field.fieldName %>: t.maybe(t.Date)<% if (index !== props.entityConfig.fields.length -1) { %>,<% } %>
        <%_ } else if (field.fieldType === 'Boolean') { _%>
        <%= field.fieldName %>: t.maybe(t.Boolean)<% if (index !== props.entityConfig.fields.length -1) { %>,<% } %>
        <%_ } else { _%>
        <%= field.fieldName %>: t.maybe(t.String)<% if (index !== props.entityConfig.fields.length -1) { %>,<% } %>
        <%_ } _%>
        <%_ }) _%>
      }),
      formValue: this.props.<%= camelCase(props.name) %>,
      formOptions: {
        id: {
          returnKeyType: 'done',
          onSubmitEditing: () => this.submitForm()
        }
      },
      success: false,
      <%= camelCase(props.name) %>: {}
    }

    this.submitForm = this.submitForm.bind(this)
    this.formChange = this.formChange.bind(this)
  }

  componentWillMount () {
    this.props.get<%= props.name %>(this.props.entityId)
  }

  componentWillReceiveProps (newProps) {
    if (newProps.<%= camelCase(props.name) %>) {
      this.setState({ <%= camelCase(props.name) %>: newProps.<%= camelCase(props.name) %> })
    }

    // Did the update attempt complete?
    if (!newProps.updating && this.state.requesting) {
      if (newProps.error) {
        if (newProps.error === 'WRONG') {
          Alert.alert('Error', 'Something went wrong updating the entity', [{text: 'OK'}])
        }
        this.setState({
          success: false,
          requesting: false
        })
      } else {
        this.setState({
          success: true,
          requesting: false
        })
        Alert.alert('Success', 'Entity updated successfully', [{text: 'OK'}])
        NavigationActions.pop()
      }
    }
  }

  submitForm () {
    this.setState({
      success: false,
      requesting: true
    })
    // call getValue() to get the values of the form
    const <%= camelCase(props.name) %> = this.refs.form.getValue()
    if (<%= camelCase(props.name) %>) { // if validation fails, value will be null
      this.props.update<%= props.name %>(<%= camelCase(props.name) %>)
    }
  }

  formChange (newValue) {
    this.setState({
      formValue: newValue
    })
  }

  render () {
    return (
      <ScrollView style={styles.container}>
        <KeyboardAvoidingView behavior='position'>
          <Form
            ref='form'
            type={this.state.formModel}
            options={this.state.formOptions}
            value={this.state.formValue}
            onChange={this.formChange}
          />
          <TouchableHighlight style={styles.button} onPress={this.submitForm} underlayColor='#99d9f4'>
            <Text style={styles.buttonText}>Update</Text>
          </TouchableHighlight>
        </KeyboardAvoidingView>
      </ScrollView>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    <%= camelCase(props.name) %>: state.<%= camelCase(props.pluralName) %>.<%= camelCase(props.name) %>,
    fetching: state.<%= camelCase(props.pluralName) %>.fetchingOne,
    updating: state.<%= camelCase(props.pluralName) %>.updating,
    error: state.<%= camelCase(props.pluralName) %>.errorOne
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    get<%= props.name %>: (id) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>Request(id)),
    update<%= props.name %>: (<%= camelCase(props.name) %>) => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateRequest(<%= camelCase(props.name) %>))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= props.name %>EntityEditScreen)
