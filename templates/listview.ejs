import React from 'react'
import { View, Text, ListView, TouchableOpacity } from 'react-native'
import { connect } from 'react-redux'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'
import { Actions as NavigationActions } from 'react-native-router-flux' // eslint-disable-line

// For empty lists
import AlertMessage from '../Components/AlertMessage'

// Styles
import styles from './Styles/<%= props.name %>EntityScreenStyle'

class <%= props.name %>EntityScreen extends React.Component {

  state: {
    dataSource: Object
  }

  constructor (props) {
    super(props)
    // If you need scroll to bottom, consider http://bit.ly/2bMQ2BZ

    /* ***********************************************************
    * STEP 1
    * This is an array of objects with the properties you desire
    * Usually this should come from Redux mapStateToProps
    *************************************************************/
    const dataObjects = []

    /* ***********************************************************
    * STEP 2
    * Teach datasource how to detect if rows are different
    * Make this function fast!  Perhaps something like:
    *   (r1, r2) => r1.id !== r2.id}
    *************************************************************/
    const rowHasChanged = (r1, r2) => r1 !== r2

    // DataSource configured
    const ds = new ListView.DataSource({rowHasChanged})

    // Datasource is always in state
    this.state = {
      dataSource: ds.cloneWithRows(dataObjects)
    }
  }

  /* ***********************************************************
  * STEP 3
  * `renderRow` function -How each cell/row should be rendered
  * It's our best practice to place a single component here:
  *
  * e.g.
    return <MyCustomCell title={rowData.title} description={rowData.description} />
  *************************************************************/
  renderRow (rowData) {
    return (
      <TouchableOpacity onPress={NavigationActions.<%= camelCase(props.name) %>EntityDetail.bind(this, { entityId: rowData.id })}>
        <View style={styles.row}>
          <Text style={styles.boldLabel}>{rowData.id}</Text>
          {/* <Text style={styles.label}>{rowData.description}</Text> */}
        </View>
      </TouchableOpacity>
    )
  }

  /* ***********************************************************
  * STEP 4
  * If your datasource is driven by Redux, you'll need to
  * reset it when new data arrives.
  * DO NOT! place `cloneWithRows` inside of render, since render
  * is called very often, and should remain fast!  Just replace
  * state's datasource on newProps.
  *
  *************************************************************/
  componentWillReceiveProps (newProps) {
    if (newProps.<%= camelCase(props.pluralName) %>) {
      this.setState({
        dataSource: this.state.dataSource.cloneWithRows(newProps.<%= camelCase(props.pluralName) %>)
      })
    }
  }

  componentWillMount () {
    this.props.getAll<%= props.pluralName %>()
  }

  // Used for friendly AlertMessage
  // returns true if the dataSource is empty
  noRowData () {
    return this.state.dataSource.getRowCount() === 0
  }

  /*
  // Render a footer.
  renderFooter = () => {
    return (
      <Text> - Footer - </Text>
    )
  }
  */

  render () {
    return (
      <View style={styles.container}>
        <AlertMessage title='No <%= props.pluralName %> Found' show={this.noRowData() && !this.props.fetching} />
        <ListView
          contentContainerStyle={styles.listContent}
          dataSource={this.state.dataSource}
          renderRow={this.renderRow}
          /* renderFooter={this.renderFooter} */
          enableEmptySections
          pageSize={15}
        />
      </View>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    // ...redux state to props here
    <%= camelCase(props.pluralName) %>: state.<%= camelCase(props.pluralName) %>.<%= camelCase(props.pluralName) %>,
    fetching: state.<%= camelCase(props.pluralName) %>.fetchingAll,
    error: state.<%= camelCase(props.pluralName) %>.errorAll
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    getAll<%= props.pluralName %>: () => dispatch(<%= props.name %>Actions.<%= camelCase(props.name) %>AllRequest())
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= props.name %>EntityScreen)
