import { call, put } from 'redux-saga/effects'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'

export function * get<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %>Id } = action
  // make the call to the api
  const response = yield call(api.get<%= props.name %>, <%= camelCase(props.name) %>Id)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure(response.data))
  }
}

export function * get<%= props.pluralName %> (api) {
  // make the call to the api
  const response = yield call(api.get<%= props.pluralName %>)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllFailure(response.data))
  }
}

export function * update<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %> } = action
  // make the call to the api
  const response = yield call(api.update<%= props.name %>, <%= camelCase(props.name) %>)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>UpdateFailure(response.data))
  }
}

export function * delete<%= props.name %> (api, action) {
  const { <%= camelCase(props.name) %>Id } = action
  // make the call to the api
  const response = yield call(api.delete<%= props.name %>, <%= camelCase(props.name) %>Id)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteSuccess())
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>DeleteFailure(response.data))
  }
}
