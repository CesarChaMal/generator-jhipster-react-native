import React from 'react';
import { View, Text, FlatList, TextInput } from 'react-native';
import { connect } from 'react-redux';

import WebsocketService from '../../shared/websockets/websocket.service';
import { getLogin } from '../../shared/reducers/account.reducer';
import ChatActions from './chat.reducer';
import styles from './chat-screen.styles';
import RoundedButton from '../../shared/components/rounded-button/rounded-button';

function ChatScreen(props) {
  const [message, setMessage] = React.useState('');
  const { username, chat } = props;

  React.useEffect(() => {
    WebsocketService.connect();
    return function cleanup() {
      WebsocketService.disconnect();
    };
  }, []);

  React.useEffect(() => {
    if (username !== 'anonymoususer') {
      WebsocketService.subscribeToChat();
    }
  }, [username]);

  const renderRow = ({ item }) => {
    return (
      <View style={styles.row}>
        <Text style={styles.boldLabel}>{item.user}</Text>
        <Text>{item.message}</Text>
      </View>
    );
  };

  // componentDidUpdate(prevProps) {
  //   this.;
  // }

  const updateMessage = (newMessage) => setMessage(newMessage);

  const sendMessage = () => {
    if (message.length > 0) {
      WebsocketService.sendChat({ user: username, message });
      setMessage('');
    }
  };

  // The default function if no Key is provided is index
  // an identifiable key is important if you plan on
  // item reordering.  Otherwise index is fine
  const keyExtractor = (item, index) => `${index}`;

  // How many items should be kept im memory as we scroll?
  const oneScreensWorth = 21;

  const memoizedChat = React.useMemo(() => [...chat].reverse(), [chat]);

  return (
    <View style={styles.container} testID="chatScreen">
      <FlatList
        style={styles.flex}
        contentContainerStyle={styles.listContent}
        data={memoizedChat}
        inverted={true}
        renderItem={renderRow}
        keyExtractor={keyExtractor}
        initialNumToRender={oneScreensWorth}
        testID="chatScreenFlatList"
      />
      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Type a message..."
          style={styles.messageInput}
          value={message}
          onChangeText={updateMessage}
          autoCapitalize="none"
          onSubmitEditing={sendMessage}
          returnKeyType={'send'}
          autoCorrect={false}
          testID="chatScreenInput"
        />
        <RoundedButton style={styles.button} onPress={sendMessage} text={'Send'} testID="chatScreenSendButton" />
      </View>
    </View>
  );
}

const mapStateToProps = (state) => {
  return {
    chat: state.chat.chat,
    username: getLogin(state.account),
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    resetChat: dispatch(ChatActions.chatReset()),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);
