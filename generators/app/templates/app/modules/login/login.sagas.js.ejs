import { call, put, select } from 'redux-saga/effects'

import LoginActions from './login.reducer'
import AccountActions from '../../shared/reducers/account.reducer'
<%_ if (context.websocket) { _%>
import WebsocketService from '../../shared/websockets/websocket.service'
<%_ } _%>
<%_ if (context.authenticationType === 'oauth2') { _%>
import { doOauthPkceFlow } from './login.utils';
<%_ } _%>

export const selectAuthToken = (state) => state.login.authToken
// attempts to login
<%_ if (context.authenticationType === 'oauth2') { _%>
export function * login (api) {
  // get the oauth issuer information from the backend
  const authInfo = yield call(api.getOauthInfo)
  if (authInfo.ok) {
    try {
      const { issuer, clientId } = authInfo.data;
      // if using Okta for auth, configure clientId here and remove from above
      // const clientId = '0favl263f83H1kxJk0h7';
      const { accessToken } = yield call(doOauthPkceFlow, clientId, issuer);
      if (accessToken) {
        yield call(api.setAuthToken, accessToken);
        yield put(LoginActions.loginSuccess(accessToken));
        yield put(AccountActions.accountRequest());
        <%_ if (context.websocket) { _%>
        WebsocketService.setToken(authToken)
        <%_ } _%>
        yield put({ type: 'RELOGIN_OK' });
      }
    } catch (e) {
      console.log(e);
      <%_ // todo get expected error format _%>
      yield put(LoginActions.loginFailure('Login failed'))
    }
  } else {
    const errorMessage = !authInfo.data
      ? 'Failed to reach backend API'
      : authInfo.data && authInfo.data.detail
      ? authInfo.data.detail
      : 'Bad Credentials';
    yield put(LoginActions.loginFailure(errorMessage));
  }
}

<%_ } else if (context.authenticationType === 'jwt') { _%>
export function * login (api, { username, password }) {
  const authObj = {
    username: username,
    password: password,
    rememberMe: true
  }

  const response = yield call(api.login, authObj)

  // success?
  if (response.ok) {
    yield call(api.setAuthToken, response.data.id_token)
    yield put(LoginActions.loginSuccess(response.data.id_token))
    yield put(AccountActions.accountRequest())
    <%_ if (context.websocket) { _%>
    WebsocketService.setToken(response.data.id_token)
    <%_ } _%>
    yield put({ type: 'RELOGIN_OK' })
  } else {
    const errorMessage = !response.data
      ? 'Failed to reach backend API'
      : response.data && response.data.detail
      ? response.data.detail
      : 'Bad Credentials';
    yield put(LoginActions.loginFailure(errorMessage));
  }
}
<%_ } _%>
// attempts to logout
export function * logout (api) {
  yield call(api.removeAuthToken)
  yield put(AccountActions.accountReset())
  yield put(AccountActions.accountRequest())
  yield put(LoginActions.logoutSuccess())
  yield put({ type: 'RELOGIN_ABORT' })
}

// loads the login
export function * loginLoad (api) {
  const authToken = yield select(selectAuthToken)
  // only set the token if we have it
  if (authToken) {
    yield call(api.setAuthToken, authToken)
    <%_ if (context.websocket) { _%>
    WebsocketService.setToken(authToken)
    <%_ } _%>
  }
  yield put(LoginActions.loginLoadSuccess())
}
