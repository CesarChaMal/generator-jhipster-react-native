import React, { createRef } from 'react';
import { Text, View } from 'react-native';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import { connect } from 'react-redux';
import * as Yup from 'yup';

import LoginActions from './login.reducer';
import { useDidUpdateEffect } from '../../shared/util/use-did-update-effect';
import { Form, FormButton, FormField } from '../../shared/components/form';
import styles from './login-screen.styles';

function LoginScreen(props) {
  // setup error state for displaying error messages
  const [loginError, setLoginError] = React.useState('');

  // if the user is already logged in, send them home
  React.useEffect(() => {
    if (props.account !== null) {
      props.navigation.navigate('Home');
    }
  }, [props.account, props.navigation]);

  // skip the first render but check for API responses and show error if not fetching
  useDidUpdateEffect(() => {
    if (!props.fetching && props.error) {
      setLoginError(props.error);
    }
  }, [props.fetching]);

  // submit handler
  const onSubmit = (data) => props.attemptLogin(data.login, data.password);

  // create refs for handling onSubmit functionality
  const passwordRef = createRef();
  const formRef = createRef();

  // set up validation schema for the form
  const validationSchema = Yup.object().shape({
    login: Yup.string().required('Please enter your login').label('Login'),
    password: Yup.string().required().label('Password'),
  });

  return (
    <KeyboardAwareScrollView contentContainerStyle={styles.container}>
      <View style={styles.formContainer}>
        <Text style={styles.errorText}>{loginError}</Text>
        <Form initialValues={{ login: '', password: '' }} validationSchema={validationSchema} onSubmit={onSubmit} ref={formRef}>
          <FormField
            name="login"
            label="Login"
            placeholder="Enter login"
            onSubmitEditing={() => passwordRef?.current?.focus()}
            autoCapitalize="none"
            keyboardType="login"
            textContentType="username"
            autoFocus={true}
          />
          <FormField
            ref={passwordRef}
            name="password"
            label="Password"
            placeholder="Enter password"
            autoCapitalize="none"
            autoCorrect={false}
            secureTextEntry={true}
            onSubmitEditing={() => formRef?.current?.submitForm()}
            textContentType="password"
          />
          <FormButton title={'Login'} />
        </Form>
      </View>
    </KeyboardAwareScrollView>
  );
}

const mapStateToProps = (state) => {
  return {
    account: state.account.account,
    fetching: state.login.fetching,
    error: state.login.error,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    attemptLogin: (username, password) => dispatch(LoginActions.loginRequest(username, password)),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);
