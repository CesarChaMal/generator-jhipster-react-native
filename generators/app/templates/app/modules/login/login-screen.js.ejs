import React from 'react';
import { Image, View, ScrollView, Text, TextInput } from 'react-native';
import { connect } from 'react-redux';

import styles from './login-screen.styles';
import { Images } from '../../shared/themes';
import LoginActions from './login.reducer';
import RoundedButton from '../../shared/components/rounded-button/rounded-button';
import { useDidUpdateEffect } from '../../shared/util/use-did-update-effect';

function LoginScreen(props) {
  const [username, setUsername] = React.useState('');
  const [password, setPassword] = React.useState('');

  React.useEffect(() => {
    if (props.account !== null) {
      props.navigation.navigate('Home');
    }
  }, [props.account, props.navigation]);

  useDidUpdateEffect(() => {
    if (!props.fetching && props.error) {
      props.navigation.navigate('ModalScreen', { title: 'Error', message: props.error });
    }
  }, [props.fetching]);

  const handlePressLogin = () => {
    // attempt a login - a saga is listening to pick it up from here.
    props.attemptLogin(username, password);
  };

  const editable = !props.fetching;
  const textInputStyle = editable ? styles.textInput : styles.textInputReadonly;
  return (
    <ScrollView contentContainerStyle={styles.contentContainer} style={[styles.container]} keyboardShouldPersistTaps="always">
      <Image source={Images.logoLogin} style={[styles.topLogo]} />
      <View style={styles.form}>
        <View style={styles.row}>
          <Text style={styles.rowLabel}>Username</Text>
          <TextInput
            ref={(c) => {
              this.usernameInput = c;
            }}
            testID="loginScreenUsername"
            style={textInputStyle}
            value={username}
            editable={editable}
            keyboardType="default"
            returnKeyType="next"
            autoCapitalize="none"
            autoCorrect={false}
            onChangeText={setUsername}
            underlineColorAndroid="transparent"
            onSubmitEditing={() => this.passwordInput.focus()}
            placeholder="Username"
          />
        </View>

        <View style={styles.row}>
          <Text style={styles.rowLabel}>Password</Text>
          <TextInput
            ref={(c) => {
              this.passwordInput = c;
            }}
            testID="loginScreenPassword"
            style={textInputStyle}
            value={password}
            editable={editable}
            keyboardType="default"
            returnKeyType="go"
            autoCapitalize="none"
            autoCorrect={false}
            secureTextEntry
            onChangeText={setPassword}
            underlineColorAndroid="transparent"
            onSubmitEditing={handlePressLogin}
            placeholder="Password"
          />
        </View>
        <RoundedButton text={'Sign In'} onPress={handlePressLogin} />
      </View>
    </ScrollView>
  );
}

const mapStateToProps = (state) => {
  return {
    account: state.account.account,
    fetching: state.login.fetching,
    error: state.login.error,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    attemptLogin: (username, password) => dispatch(LoginActions.loginRequest(username, password)),
    logout: () => dispatch(LoginActions.logoutRequest()),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);
