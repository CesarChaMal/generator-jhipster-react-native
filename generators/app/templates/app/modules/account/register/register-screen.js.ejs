import React from 'react'
import { Text, TouchableHighlight } from 'react-native'
import { connect } from 'react-redux'
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'

import RegisterActions from '../register/register.reducer'
// Styles
import styles from './register-screen.styles'

class RegisterScreen extends React.Component {
  constructor (props) {
    super(props)
/*
    this.state = {
      accountModel: t.struct({
        login: t.String,
        password: t.String,
        confirmPassword: t.String,
        email: t.String,
        langKey: t.String
      }),
      accountValue: { login: null, password: null, confirmPassword: null, email: null, langKey: 'en' },
      options: {
        fields: {
          login: {
            label: 'Username',
            returnKeyType: 'next',
            onSubmitEditing: () => this.form.getComponent('password').refs.input.focus()
          },
          password: {
            secureTextEntry: true,
            returnKeyType: 'next',
            onSubmitEditing: () => this.form.getComponent('confirmPassword').refs.input.focus()
          },
          confirmPassword: {
            secureTextEntry: true,
            returnKeyType: 'next',
            onSubmitEditing: () => this.form.getComponent('email').refs.input.focus()
          },
          email: {
            returnKeyType: 'done',
            onSubmitEditing: () => this.submitUpdate()
          },
          langKey: {
            hidden: true
          }
        }
      },
    }
*/
    this.submitUpdate = this.submitUpdate.bind(this)
    this.accountChange = this.accountChange.bind(this)
  }

  submitUpdate () {
    // call getValue() to get the values of the form
    const value = this.form.getValue()
    if (value) { // if validation fails, value will be null
      if (value.password !== value.confirmPassword) {
        this.props.navigation.navigate('ModalScreen', { title: 'Error', message: 'Passwords do not match' });
        return
      }
      this.props.register(value)
    }
  }

  componentDidUpdate(prevProps) {
    if (prevProps.fetching && !this.props.fetching) {
      if (this.props.error) {
        this.props.navigation.navigate('ModalScreen', { title: 'Error', message: this.props.error });
      } else {
        // todo go back on success
        // Navigation.popToRoot(this.props.componentId)
        this.props.navigation.navigate('ModalScreen', { title: 'Registration Successful', message: 'Please check your email' });
      }
    }
  }

  accountChange (newValue) {
    this.setState({
      accountValue: newValue
    })
  }

  render () {
    return (
      <KeyboardAwareScrollView style={styles.container} keyboardShouldPersistTaps={'handled'}>
        {/*<Form*/}
        {/*  ref={(c) => {*/}
        {/*    this.form = c;*/}
        {/*  }}*/}
        {/*  type={this.state.accountModel}*/}
        {/*  options={this.state.options}*/}
        {/*  value={this.state.accountValue}*/}
        {/*  onChange={this.accountChange}*/}
        {/*/>*/}
        <TouchableHighlight style={styles.button} onPress={this.submitUpdate} underlayColor='#99d9f4'>
          <Text style={styles.buttonText}>Register</Text>
        </TouchableHighlight>
      </KeyboardAwareScrollView>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    fetching: state.register.fetching,
    error: state.register.error
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    register: (account) => dispatch(RegisterActions.registerRequest(account))
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(RegisterScreen)
