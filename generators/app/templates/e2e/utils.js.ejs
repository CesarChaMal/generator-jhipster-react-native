const DetoxExpoHelpers = require('detox-expo-helpers');

const username = process.env.E2E_USERNAME || 'user';
const password = process.env.E2E_PASSWORD || 'user';

const navigateToLoginScreen = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Login');
  await expect(element(by.id('loginScreenUsername'))).toBeVisible();
};

const loginAsUser = async () => {
  await navigateToLoginScreen();
  await element(by.id('loginScreenUsername')).replaceText(username);
  await element(by.id('loginScreenPassword')).replaceText(password);
  await element(by.id('loginScreenLoginButton')).tap();
  try {
    await waitForElementToBeVisibleById('homeScreen')
  } catch (e) {
    throw new Error('Logging in failed. Check backend status or credentials.');
  }
};

const logout = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Logout');
};

const goBack = async () => {
  if (device.getPlatform() === 'ios') {
    await tapFirstElementByLabel('Back');
  } else {
    await device.pressBack();
  }
};

const toggleSwitchToValue = async (switchId, targetValue) => {
  let attributes = await element(by.id(switchId)).getAttributes();
  while (!!+attributes.value !== targetValue) {
    await element(by.id(switchId)).longPress();
    attributes = await element(by.id(switchId)).getAttributes();
  }
};

const scrollTo = async (fieldId, listId, size = 0.15, direction = 'up', speed = 'slow') => {
  await waitFor(element(by.id(fieldId)))
    .toBeVisible()
    .whileElement(by.type('ABI40_0_0RCTCustomScrollView').withAncestor(by.id(listId)))
    .scroll(600, 'down');
};

const tapFirstElementByLabel = async (label) => {
  await element(by.label(label)).atIndex(0).tap();
};

const waitForElementToBeVisibleByLabel = async (elementLabel, timeout = 5000) => {
  await waitFor(element(by.label(elementLabel))).toBeVisible().withTimeout(timeout);
}

const waitForElementToBeVisibleById = async (elementId, timeout = 5000) => {
  await waitFor(element(by.id(elementId))).toBeVisible().withTimeout(timeout);
}

const reloadApp = async (bailOnFailure) => {
  try {
    await DetoxExpoHelpers.reloadApp();
    // if you eject from expo, you should replace the line above with:
    // device.reloadReactNative()
    await waitForElementToBeVisibleById('homeScreen', 15000);
    await waitForElementToBeVisibleByLabel('Menu Button', 15000);
  } catch (e) {
    console.warn('Reloading app failed, retrying once');
    console.warn(e);
    if (!bailOnFailure) {
      await reloadApp(true);
    }
  }
};

module.exports = {
  navigateToLoginScreen,
  loginAsUser,
  goBack,
  logout,
  scrollTo,
  tapFirstElementByLabel,
  waitForElementToBeVisibleById,
  waitForElementToBeVisibleByLabel,
  toggleSwitchToValue,
  reloadApp,
};
