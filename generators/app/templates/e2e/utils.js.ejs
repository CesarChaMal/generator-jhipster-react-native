const DetoxExpoHelpers = require('detox-expo-helpers');
const { closeSoftKeyboard } = require('detox/src/android/espressoapi/ViewActions');

const username = process.env.E2E_USERNAME || 'user';
const password = process.env.E2E_PASSWORD || 'user';

const navigateToLoginScreen = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Login');
  await expect(element(by.id('loginScreenUsername'))).toBeVisible();
};

const loginAsUser = async () => {
  await navigateToLoginScreen();
  await element(by.id('loginScreenUsername')).replaceText(username);
  await element(by.id('loginScreenPassword')).replaceText(password);
  await closeKeyboard('loginScreen');
  await element(by.id('loginScreenLoginButton')).tap();
  try {
    await waitForSplashScreen();
  } catch (e) {
    throw new Error('Logging in failed. Check backend status or credentials.');
  }
};

const logout = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Logout');
};

const goBack = async () => {
  if (device.getPlatform() === 'ios') {
    await tapFirstElementByLabel('Back');
  } else {
    await device.pressBack();
  }
};

const toggleSwitchToValue = async (switchId, targetValue) => {
  let attributes = await element(by.id(switchId)).getAttributes();
  while (!!+attributes.value !== targetValue) {
    await element(by.id(switchId)).longPress();
    attributes = await element(by.id(switchId)).getAttributes();
  }
};

const closeKeyboard = async (componentId = null) => {
  try {
    if (device.getPlatform() === 'ios') {
      await element(by.id(componentId)).tap();
    } else {
      await closeSoftKeyboard();
    }
  } catch (e) {
    console.warn(e);
  }
};

const scrollTo = async (fieldId, listId, size = 0.15, direction = 'up', speed = 'slow') => {
  await waitFor(element(by.id(fieldId)))
    .toBeVisible()
    .whileElement(by.type('ABI40_0_0RCTCustomScrollView').withAncestor(by.id(listId)))
    .scroll(600, 'down');
};

const tapFirstElementByLabel = async (label) => {
  await element(by.label(label)).atIndex(0).tap();
};

const waitForElementToBeVisible = async (elementId, timeout = 3000) => {
  await waitFor(element(by.id(elementId)))
    .toBeVisible()
    .withTimeout(timeout);
}

const waitForSplashScreen = async () => {
  await waitForElementToBeVisible('launchScreen')
};

const reloadApp = async () => {
  await DetoxExpoHelpers.reloadApp();
  // if you eject from expo, you should replace the line above with:
  // device.reloadReactNative()
  await waitForSplashScreen();
};

module.exports = {
  navigateToLoginScreen,
  loginAsUser,
  goBack,
  logout,
  scrollTo,
  tapFirstElementByLabel,
  waitForSplashScreen,
  waitForElementToBeVisible,
  closeKeyboard,
  toggleSwitchToValue,
  reloadApp,
};
