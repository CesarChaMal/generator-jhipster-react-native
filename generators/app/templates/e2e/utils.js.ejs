const DetoxExpoHelpers = require('detox-expo-helpers');
const { closeSoftKeyboard } = require('detox/src/android/espressoapi/ViewActions');

const username = process.env.E2E_USERNAME || 'user';
const password = process.env.E2E_PASSWORD || 'user';

const navigateToLoginScreen = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Login');
  await expect(element(by.id('loginScreenUsername'))).toBeVisible();
};

const loginAsUser = async () => {
  await navigateToLoginScreen();
  await element(by.id('loginScreenUsername')).replaceText(username);
  await element(by.id('loginScreenPassword')).replaceText(password);
  await closeKeyboard('loginScreen');
  await element(by.id('loginScreenLoginButton')).tap();
  try {
    await waitForSplashScreen();
  } catch (e) {
    throw new Error('Logging in failed. Check backend status or credentials.');
  }
};

const logout = async () => {
  await tapFirstElementByLabel('Menu Button');
  await tapFirstElementByLabel('Logout');
};

const goBack = async () => {
  if (device.getPlatform() === 'ios') {
    await tapFirstElementByLabel('Back');
  } else {
    await device.pressBack();
  }
};

const closeKeyboard = async (componentId = null) => {
  try {
    if (device.getPlatform() === 'ios') {
      await element(by.id(componentId)).tap();
    } else {
      await closeSoftKeyboard();
    }
  } catch (e) {
    console.warn(e);
  }
};

const scrollTo = async (fieldId, listId) => {
  let attempts = 0;
  if (device.getPlatform() === 'ios') {
    let attributes = await element(by.id(fieldId)).getAttributes();
    while (!attributes.visible && attempts < 20) {
      await element(by.id(listId)).swipe('up', 'slow', .3);
      attributes = await element(by.id(fieldId)).getAttributes();
      attempts += 1;
    }
    if (attempts >= 20) {
      throw `Did not find after attempting to scroll ${listId} to element ${fieldID}`;
    }
  }
};

const tapFirstElementByLabel = async (elementId) => {
  await element(by.label(elementId)).atIndex(0).tap();
};

const waitForSplashScreen = async () => {
  await waitFor(element(by.id('launchScreen')))
    .toBeVisible()
    .withTimeout(3000);
};

const reloadApp = async () => {
  await DetoxExpoHelpers.reloadApp();
  // if you eject from expo, you should replace the line above with:
  // device.reloadReactNative()
  await waitForSplashScreen();
};

module.exports = {
  navigateToLoginScreen,
  loginAsUser,
  goBack,
  logout,
  scrollTo,
  tapFirstElementByLabel,
  waitForSplashScreen,
  closeKeyboard,
  reloadApp,
};
