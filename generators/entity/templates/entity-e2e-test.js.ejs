const Utils = require('../utils')

describe('<%= context.entityNameCapitalized %> Screen Tests', () => {
  before(async () => {
    await Utils.reloadApp()
    await Utils.loginAsUser()
  })
  after(async () => {
    await Utils.goBack()
    await Utils.logout()
  })

  beforeEach(async () => {
    await Utils.reloadApp()
    await navigateTo<%= context.entityNameCapitalized %>Screen()
  })

  const navigateTo<%= context.entityNameCapitalized %>Screen = async () => {
    await Utils.waitForSplashScreen();
    await Utils.tapFirstElementByLabel('Menu Button');
    await Utils.tapFirstElementByLabel('Entities');
    await Utils.scrollTo('<%= context.entityInstance %>EntityScreenButton', 'entityScreenScrollList')
    await element(by.id('<%= context.entityInstance %>EntityScreenButton')).tap()
  }

  it('should allow you to create, update, and delete the <%= context.entityNameCapitalized %> entity', async () => {
    await expect(element(by.id('<%= context.entityInstance %>Screen'))).toBeVisible()
    // create
    await Utils.tapFirstElementByLabel(' New ')
    <%_ context.fieldsNoId.forEach((field, index) => {
      let formFieldType = 'String'
      if (field.fieldType === 'Integer' || field.fieldType === 'Long' || field.fieldType === 'Float' ||
        field.fieldType === 'Decimal' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
        formFieldType = 'Number'
      } else if (field.fieldType === 'LocalDate' || field.fieldType === 'Instant' || field.fieldType === 'ZonedDateTime') {
        formFieldType = 'Date'
      } else if (field.fieldType === 'Boolean') {
        formFieldType = 'Boolean'
      } else if (field.fieldIsEnum) {
        formFieldType = field.fieldType
      }
    _%>
    <%_ if (['String', 'Number'].includes(formFieldType)) { _%>
    await Utils.scrollTo('<%= field.fieldName %>Input', '<%= context.entityInstance %>EditScrollView')
    <%_ } _%>
    <%_ if (formFieldType === 'String') { _%>
    await element(by.id('<%= field.fieldName %>Input')).replaceText('sample-data')
      <%_ } else if (formFieldType === 'Number') { _%>
    await element(by.id('<%= field.fieldName %>Input')).replaceText('123')
      <%_ } _%>
    <%_ }) _%>
    await Utils.closeKeyboard('<%= context.entityInstance %>EditScrollView')
    await Utils.scrollTo('submitButton', '<%= context.entityInstance %>EditScrollView')
    await element(by.id('submitButton')).tap()
    // view
    <%_ context.fieldsNoId.forEach((field, index) => {
      let formFieldType = 'String'
      if (field.fieldType === 'Integer' || field.fieldType === 'Long' || field.fieldType === 'Float' ||
        field.fieldType === 'Decimal' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
        formFieldType = 'Number'
      } else if (field.fieldType === 'LocalDate' || field.fieldType === 'Instant' || field.fieldType === 'ZonedDateTime') {
        formFieldType = 'Date'
      } else if (field.fieldType === 'Boolean') {
        formFieldType = 'Boolean'
      } else if (field.fieldIsEnum) {
        formFieldType = field.fieldType
      }
    _%>
    <%_ if (['String', 'Number'].includes(formFieldType)) { _%>
    await Utils.scrollTo('<%= field.fieldName %>', '<%= context.entityInstance %>DetailScrollView')
    <%_ } _%>
    <%_ if (formFieldType === 'String') { _%>
    await expect(element(by.id('<%= field.fieldName %>'))).toHaveLabel('sample-data')
    <%_ } else if (formFieldType === 'Number') { _%>
    await expect(element(by.id('<%= field.fieldName %>'))).toHaveLabel('123')
    <%_ } _%>
    <%_ }) _%>
    // update
    await Utils.tapFirstElementByLabel('<%= context.entityNameCapitalized %> Edit Button');
    <%_ context.fieldsNoId.forEach((field, index) => {
      let formFieldType = 'String'
      if (field.fieldType === 'Integer' || field.fieldType === 'Long' || field.fieldType === 'Float' ||
        field.fieldType === 'Decimal' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
        formFieldType = 'Number'
      } else if (field.fieldType === 'LocalDate' || field.fieldType === 'Instant' || field.fieldType === 'ZonedDateTime') {
        formFieldType = 'Date'
      } else if (field.fieldType === 'Boolean') {
        formFieldType = 'Boolean'
      } else if (field.fieldIsEnum) {
        formFieldType = field.fieldType
      }
      _%>




    <%_ if (['String', 'Number'].includes(formFieldType)) { _%>
    await Utils.scrollTo('<%= field.fieldName %>Input', '<%= context.entityInstance %>EditScrollView')
    <%_ } _%>
    <%_ if (formFieldType === 'String') { _%>
    await element(by.id('<%= field.fieldName %>Input')).replaceText('sample-data-2')
    <%_ } else if (formFieldType === 'Number') { _%>
    await element(by.id('<%= field.fieldName %>Input')).replaceText('1234')
    <%_ } _%>



    <%_ }) _%>
    await Utils.closeKeyboard('<%= context.entityInstance %>EditScrollView')
    await Utils.scrollTo('submitButton', '<%= context.entityInstance %>EditScrollView')
    await element(by.id('submitButton')).tap()
    <%_ context.fieldsNoId.forEach((field, index) => {
      let formFieldType = 'String'
      if (field.fieldType === 'Integer' || field.fieldType === 'Long' || field.fieldType === 'Float' ||
        field.fieldType === 'Decimal' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
        formFieldType = 'Number'
      } else if (field.fieldType === 'LocalDate' || field.fieldType === 'Instant' || field.fieldType === 'ZonedDateTime') {
        formFieldType = 'Date'
      } else if (field.fieldType === 'Boolean') {
        formFieldType = 'Boolean'
      } else if (field.fieldIsEnum) {
        formFieldType = field.fieldType
      }
    if (formFieldType === 'String') { _%>
    await expect(element(by.id('<%= field.fieldName %>'))).toHaveLabel('sample-data-2')
    <%_ } else if (formFieldType === 'Number') { _%>
    await expect(element(by.id('<%= field.fieldName %>'))).toHaveLabel('1234')
    <%_ } _%>
    <%_ }) _%>
    // delete
    await Utils.tapFirstElementByLabel('<%= context.entityNameCapitalized %> Delete Button');
    await Utils.tapFirstElementByLabel('Delete');
    await expect(element(by.id('<%= context.entityInstance %>Screen'))).toBeVisible()
  })
})

<%_
// this generates acceptable fake data to use
context.resetFakerSeed(`entity-cypress-${context.entityNameCapitalized}`);
context.fieldsNoId.forEach((field) => {
  const data = field.generateFakeData('cypress')
  })
_%>
