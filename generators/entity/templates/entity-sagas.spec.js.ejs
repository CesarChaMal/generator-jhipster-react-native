import { put } from 'redux-saga/effects'

import FixtureAPI from '../../../../../app/shared/services/fixture-api'
import { get<%= name %>, get<%= pluralName %>, update<%= name %>, delete<%= name %><%= searchEngine ? `, search${pluralName}` : '' %> } from '../../../../../app/modules/entities/<%= kebabCaseName %>/<%= kebabCaseName %>.sagas'
import <%= name %>Actions from '../../../../../app/modules/entities/<%= kebabCaseName %>/<%= kebabCaseName %>.reducer'

const stepper = (fn) => (mock) => fn.next(mock).value

test('get success path', () => {
  const response = FixtureAPI.get<%= name %>(1)
  const step = stepper(get<%= name %>(FixtureAPI, { <%= camelCaseName %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>Success({ id: 1 })))
})

test('get failure path', () => {
  const response = { ok: false }
  const step = stepper(get<%= name %>(FixtureAPI, { <%= camelCaseName %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>Failure()))
})

test('getAll success path', () => {
  const response = FixtureAPI.get<%= pluralName %>()
  const step = stepper(get<%= pluralName %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>AllSuccess([{ id: 1 }, { id: 2 }])))
})

test('getAll failure path', () => {
  const response = { ok: false }
  const step = stepper(get<%= pluralName %>(FixtureAPI, { options: { page: 0, sort: 'id,asc', size: 20 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>AllFailure()))
})

test('update success path', () => {
  const response = FixtureAPI.update<%= name %>({ id: 1 })
  const step = stepper(update<%= name %>(FixtureAPI, { <%= camelCaseName %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>UpdateSuccess({ id: 1 })))
})

test('update failure path', () => {
  const response = { ok: false }
  const step = stepper(update<%= name %>(FixtureAPI, { <%= camelCaseName %>: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>UpdateFailure()))
})

<%_ if (searchEngine) { _%>
test('search success path', () => {
  const response = FixtureAPI.search<%= pluralName %>()
  const step = stepper(search<%= pluralName %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>SearchSuccess([{ id: 1 }, { id: 2 }])))
})

test('search failure path', () => {
  const response = { ok: false }
  const step = stepper(search<%= pluralName %>(FixtureAPI, '*'))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>SearchFailure()))
})
<%_ } _%>
test('delete success path', () => {
  const response = FixtureAPI.delete<%= name %>({ id: 1 })
  const step = stepper(delete<%= name %>(FixtureAPI, { <%= camelCaseName %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Successful return and data!
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>DeleteSuccess({ id: 1 })))
})

test('delete failure path', () => {
  const response = { ok: false }
  const step = stepper(delete<%= name %>(FixtureAPI, { <%= camelCaseName %>Id: { id: 1 } }))
  // Step 1: Hit the api
  step()
  // Step 2: Failed response.
  expect(step(response)).toEqual(put(<%= name %>Actions.<%= camelCaseName %>DeleteFailure()))
})
