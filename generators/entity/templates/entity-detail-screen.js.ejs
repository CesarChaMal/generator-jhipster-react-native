import React from 'react'
import { ActivityIndicator, ScrollView, Text, <% if (entityContainsImageBlob) { %>Image, <% } %>View } from 'react-native';
import { connect } from 'react-redux'
import { useFocusEffect } from '@react-navigation/native';
<%_ if (entityContainsLocalDate) { _%>
import { jsDateToLocalDate } from '../../../shared/util/date-transforms'
<%_ } _%>

import <%= name %>Actions from './<%= kebabCaseName %>.reducer'
import RoundedButton from '../../../shared/components/rounded-button/rounded-button'
import <%= name %>EntityDeleteModal from './<%= kebabCaseName %>-entity-delete-modal';
import styles from './<%= kebabCaseName %>-entity-detail-screen-style'

function <%= name %>EntityDetailScreen(props) {
  const { route, get<%= name %>, navigation } = props;
  const [deleteModalVisible, setDeleteModalVisible] = React.useState(false);

  useFocusEffect(
    React.useCallback(() => {
      if (!route.params || !route.params.entityId) {
        navigation.canGoBack() ? navigation.goBack() : navigation.navigate('<%= name %>Entity');
      } else {
        get<%= name %>(route.params.entityId);
      }
    }, [route, get<%= name %>, navigation]),
  );

  if (!props.<%= camelCaseName %> && !props.fetching && props.error) {
    return (
      <View style={styles.loading}>
        <Text>Something went wrong fetching the <%= name %>.</Text>
      </View>
    );
  }
  if (!props.<%= camelCaseName %> || props.fetching) {
    return (
      <View style={styles.loading}>
        <ActivityIndicator size="large" />
      </View>
    );
  }
  return (
    <ScrollView style={styles.container} testID="<%= camelCaseName %>DetailScrollView">
      <Text style={styles.label}>Id:</Text>
      <Text>{props.<%= camelCaseName %>.id}</Text>
      <%_ entityInfo.fields.forEach(function (field) { _%>
      {/* <%= upperFirst(field.fieldName) %> Field */}
      <Text style={styles.label}><%= upperFirst(field.fieldName) %>:</Text>
      <%_ if (field.fieldType === 'LocalDate') { _%>
        <Text testID='<%= field.fieldName %>'>{jsDateToLocalDate(props.<%= camelCaseName %>.<%= field.fieldName %>)}</Text>
      <%_ } else if (field.fieldType === 'ZonedDateTime' || field.fieldType === 'Instant' || field.fieldType === 'Boolean') { _%>
        <Text testID='<%= field.fieldName %>'>{String(props.<%= camelCaseName %>.<%= field.fieldName %>)}</Text>
      <%_ } else if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent === 'any') { _%>
        <Text testID='<%= field.fieldName %>ContentType'>Open {props.<%= camelCaseName %>.<%= field.fieldName %>ContentType} (not implemented)</Text>
      <%_ } else if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent === 'image') { _%>
        <Text testID='<%= field.fieldName %>ContentType'>{props.<%= camelCaseName %>.<%= field.fieldName %>ContentType}</Text>
        <Image
          testID="<%= field.fieldName %>"
          style={styles.imageBlob}
          source={{ uri: `data:${props.<%= camelCaseName %>.<%= field.fieldName %>ContentType};base64,${props.<%= camelCaseName %>.<%= field.fieldName %>}` }}
        />
      <%_ } else { _%>
        <Text testID='<%= field.fieldName %>'>{props.<%= camelCaseName %>.<%= field.fieldName %>}</Text>
      <%_ } _%>
      <%_ }) _%>
      <RoundedButton text="Edit" onPress={() => navigation.navigate('<%= name %>EntityEdit', { entityId: props.<%= camelCaseName %>.id })} />
      <RoundedButton text="Delete" onPress={() => setDeleteModalVisible(true)} />
      {deleteModalVisible && (
        <<%= name %>EntityDeleteModal
          navigation={navigation}
          visible={deleteModalVisible}
          setVisible={setDeleteModalVisible}
          entity={props.<%= camelCaseName %>}
        />
      )}
    </ScrollView>
  );
}

const mapStateToProps = (state) => {
  return {
    <%= camelCaseName %>: state.<%= camelCaseNamePlural %>.<%= camelCaseName %>,
    error: state.<%= camelCaseNamePlural %>.errorOne,
    fetching: state.<%= camelCaseNamePlural %>.fetchingOne,
    deleting: state.<%= camelCaseNamePlural %>.deleting,
    errorDeleting: state.<%= camelCaseNamePlural %>.errorDeleting
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    get<%= name %>: (id) => dispatch(<%= name %>Actions.<%= camelCaseName %>Request(id)),
    getAll<%= pluralName %>: (options) => dispatch(<%= name %>Actions.<%= camelCaseName %>AllRequest(options)),
    delete<%= name %>: (id) => dispatch(<%= name %>Actions.<%= camelCaseName %>DeleteRequest(id)),
    reset<%= pluralName %>: () => dispatch(<%= name %>Actions.<%= camelCaseName %>Reset()),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= name %>EntityDetailScreen)
