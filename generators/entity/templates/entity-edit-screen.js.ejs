import React, { createRef } from 'react';
import { ActivityIndicator, Text, View } from 'react-native';
import { connect } from 'react-redux'
<%_ if (isValidatorsRequired) { _%>
import * as Yup from 'yup';
<%_ } _%>

import <%= name %>Actions from './<%= kebabCaseName %>.reducer'
<%_ entityInfo.uniqueOwnerSideRelationships.filter(relation => relation.otherEntityName !== camelCaseName).forEach((relation) => { _%>
<%_ if (relation.otherEntityName === 'user') { _%>
import UserActions from '../../../shared/reducers/user.reducer'
<%_ } else { _%>
import <%= pascalCase(relation.otherEntityName) %>Actions from '../<%= kebabCase(relation.otherEntityName) %>/<%= kebabCase(relation.otherEntityName) %>.reducer'
<%_ } _%>
<%_ }) _%>
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
<%_ if (entityContainsLocalDate) { _%>
import { jsDateToLocalDate } from '../../../shared/util/date-transforms'
<%_ } _%>
import FormButton from '../../../shared/components/form/jhi-form-button';
import FormField from '../../../shared/components/form/jhi-form-field';
import Form from '../../../shared/components/form/jhi-form';
import { useDidUpdateEffect } from '../../../shared/util/use-did-update-effect';
import styles from './<%= kebabCaseName %>-entity-edit-screen-style'

<%_ if (isValidatorsRequired) { // start of isValidatorsRequired if statement _%>
// set up validation schema for the form
const validationSchema = Yup.object().shape({
  <%_ entityInfo.fields.forEach((field) => { // start of fields loop
  if (field.fieldValidate) {  // start of fieldValidate if statement_%>
  <%= field.fieldName %>: yup.<%= field.fieldValidateType %>()
    <%_field.fieldValidateRules.forEach((rule, index) => { // start of fieldValidateRules loop _%>
      <%_ if (rule === 'required') { _%>
    .required()
      <%_ } else if (rule === 'pattern') { _%>
    .pattern(/<%= field.fieldValidateRulesPattern %>/)
      <%_ } else if (rule === 'minlength') { _%>
    .min(<%= field.fieldValidateRulesMinlength %>)
      <%_ } else if (rule === 'min') { _%>
    .min(<%= field.fieldValidateRulesMin %>)
      <%_ } else if (rule === 'maxlength') { _%>
    .max(<%= field.fieldValidateRulesMaxlength %>)
      <%_ } else if (rule === 'max') { _%>
    .max(<%= field.fieldValidateRulesMax %>)
      <%_ }_%>
    <%_ }) // end of fieldValidateRules loop _%>
,
  <%_ } // end of fieldValidate if statement _%>
  <%_ }) // end of fields loop _%>
});
<%_ } // end of isValidatorsRequired if statement _%>

<%_ entityInfo.fields.forEach((field) => {
  if (field.fieldIsEnum) { _%>
const <%= field.fieldType %> = [
<%_
    const enumValues = field.fieldValues.split(',')
    enumValues.forEach((enumValue, index) => {
_%>
  {
    label: '<%= enumValue %>',
    value: '<%= enumValue %>',
  },
<%_ }) //end of value loop _%>
];
<%_ } // end of if statement
}) // end of field loop _%>

function <%= name %>EntityEditScreen(props) {
  const { get<%= name %>, route, <%= camelCaseName %>, fetching, reset } = props;
  const [formValue, setFormValue] = React.useState();
  const [error, setError] = React.useState('');

  const isNewEntity = !(route.params && route.params.entityId);

  React.useEffect(() => {
    if (!isNewEntity) {
      get<%= name %>(route.params.entityId);
    } else {
      reset();
    }
  }, [isNewEntity, get<%= name %>, route, reset]);

  React.useEffect(() => {
    if (!fetching) {
      setFormValue(entityToFormValue(<%= camelCaseName %>));
    }
  }, [<%= camelCaseName %>, fetching]);

  useDidUpdateEffect(() => {
    if (props.updating === false) {
      if (props.error) {
        // setError(props.error)
        setError('Something went wrong updating the entity');
      } else {
        setError('');
        if (isNewEntity) {
          // send to the detail screen on new entity, otherwise pop (to the detail screen)
          props.navigation.replace('<%= name %>EntityDetail', { entityId: <%= camelCaseName %>?.id });
        } else {
          props.navigation.pop();
        }
      }
    }
  }, [props.updateSuccess]);

  const onSubmit = (data) => props.update<%= name %>(formValueToEntity(data));

  if (fetching) {
    return (
      <View style={styles.loading}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  const formRef = createRef();
  <%_ entityInfo.fields.forEach((field, index) => { _%>
  const <%= field.fieldName %>Ref = createRef();
  <%_ }) _%>
  <%_ entityInfo.ownerSideRelationships.forEach((relation, index) => { _%>
  const <%= relation.relationshipNamePlural %>Ref = createRef();
  <%_ }) _%>

  return (
    <View style={styles.container}>
      <KeyboardAwareScrollView testID="<%= camelCaseName %>EditScrollView" keyboardShouldPersistTaps={'handled'}>
        <Text style={styles.errorText}>{error}</Text>
        {formValue && (
          <Form initialValues={formValue} <%_ if (isValidatorsRequired) { _%>validationSchema={validationSchema} <%_ } _%>onSubmit={onSubmit} ref={formRef}>
          <%_ entityInfo.fields.forEach((field, index) => {
            let nextFieldName = null
            if (index !== entityInfo.fields.length - 1) {
              nextFieldName = entityInfo.fields[index + 1].fieldName
            }
            const formAttributes = getEntityFormField(field, nextFieldName, entityInfo.ownerSideRelationships.length);
          _%>
          <FormField
                <%- formAttributes %>
          />
          <%_ }) _%>
            <FormButton title={'Save'} testID={'submitButton'} />
          </Form>
        )}
      </KeyboardAwareScrollView>
    </View>
  );
}
/*

// generate entity form fields...
<%_ entityInfo.ownerSideRelationships.forEach((relation) => { _%>
  <%= relation.otherEntityName %>Id: {
  testID: '<%= relation.otherEntityName %>IdInput',
  label: '<%= pascalCase(relation.relationshipName) %>'
  },
<%_ }) _%>

<%_ entityInfo.ownerSideRelationships.forEach((relation, index) => { _%>
  get<%= pascalCase(relation.otherEntityNamePlural) %> = () => {
    const <%= camelCase(relation.otherEntityNamePlural) %> = {}
    this.props.<%= camelCase(relation.otherEntityNamePlural) %>.forEach(<%= camelCase(relation.otherEntityName) %> => {
      <%= camelCase(relation.otherEntityNamePlural) %>[<%= camelCase(relation.otherEntityName) %>.id] = <%= camelCase(relation.otherEntityName) %>.<%= relation.otherEntityField || 'id' %> ? <%= camelCase(relation.otherEntityName) %>.<%= relation.otherEntityField || 'id' %>.toString() : <%= camelCase(relation.otherEntityName) %>.id.toString()
    })
    return t.maybe(t.enums(<%= relation.otherEntityNamePlural %>))
  }
<%_ }) _%>
*/

// convenience methods for customizing the mapping of the entity to/from the form value
const entityToFormValue = (value) => {
  if (!value) {
    return {}
  }
  return {
    id: value.id || null,
    <%_ entityInfo.fields.forEach((field, index) => { _%>
    <%= field.fieldName %>: value.<%= field.fieldName %> || null,
      <%_  if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent !== 'text') { _%>
    <%= field.fieldName %>ContentType: value.<%= field.fieldName %>ContentType || null,
      <%_ } _%>
    <%_ }) _%>
    <%_ entityInfo.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_ if (entityInfo.dto === 'no') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: value.<%= relation.relationshipNamePlural %>,
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: (value.<%= relation.otherEntityName %> && value.<%= relation.otherEntityName %>.id) ? value.<%= relation.otherEntityName %>.id : null,
      <%_ } _%>
    <%_ } else if (entityInfo.dto === 'mapstruct') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: value.<%= relation.relationshipNamePlural %>,
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: value.<%= relation.otherEntityName %>Id || null,
      <%_ } _%>
    <%_ } _%>
    <%_ }) _%>
  }
}
const formValueToEntity = (value) => {
  const entity = {
    id: value.id || null,
    <%_ entityInfo.fields.forEach((field, index) => { _%>
      <%_ if (field.fieldType === 'Boolean') { _%>
    <%= field.fieldName %>: value.<%= field.fieldName %> === null ? null : Boolean(value.<%= field.fieldName %>),
      <%_ } else { _%>
    <%= field.fieldName %>: value.<%= field.fieldName %> || null,
      <%_ } _%>
      <%_  if (field.fieldType === 'byte[]' && field.fieldTypeBlobContent !== 'text') { _%>
    <%= field.fieldName %>ContentType: value.<%= field.fieldName %>ContentType || null,
      <%_ } _%>
    <%_ }) _%>
    <%_ entityInfo.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_  if (entityInfo.dto === 'mapstruct') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
    <%= relation.relationshipNamePlural %>: value.<%= relation.relationshipNamePlural %>,
      <%_ } else { _%>
    <%= relation.otherEntityName %>Id: value.<%= relation.otherEntityName %>Id || null,
      <%_ } _%>
    <%_ } _%>
  <%_ }) _%>
  }
  <%_ entityInfo.ownerSideRelationships.forEach((relation, index) => { _%>
    <%_ if (entityInfo.dto === 'no') { _%>
      <%_ if (relation.relationshipType === 'many-to-many') { _%>
  entity.<%= relation.relationshipNamePlural %>: value.<%= relation.relationshipNamePlural %>,
      <%_ } else { _%>
  if (value.<%= relation.otherEntityName %>Id) {
    entity.<%= relation.otherEntityName %> = { id: value.<%= relation.otherEntityName %>Id }
  }
      <%_ } _%>
    <%_ } _%>
  <%_ }) _%>
  return entity
}

const mapStateToProps = (state) => {
  return {
    <%_ entityInfo.uniqueOwnerSideRelationships.forEach((relation) => { _%>
    <%= camelCase(relation.otherEntityNamePlural) %>: state.<%= camelCase(relation.otherEntityNamePlural) %>.<%= camelCase(relation.otherEntityNamePlural) %> || [],
    <%_ }) _%>
    <%= camelCaseName %>: state.<%= camelCaseNamePlural %>.<%= camelCaseName %>,
    fetching: state.<%= camelCaseNamePlural %>.fetchingOne,
    updating: state.<%= camelCaseNamePlural %>.updating,
    updateSuccess: state.<%= camelCaseNamePlural %>.updateSuccess,
    error: state.<%= camelCaseNamePlural %>.errorUpdating
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    <%_ entityInfo.uniqueOwnerSideRelationships.filter(relation => relation.otherEntityName !== camelCaseName).forEach((relation) => { _%>
    getAll<%= pascalCase(relation.otherEntityNamePlural) %>: (options) => dispatch(<%= pascalCase(relation.otherEntityName) %>Actions.<%= camelCase(relation.otherEntityName) %>AllRequest(options)),
    <%_ }) _%>
    get<%= name %>: (id) => dispatch(<%= name %>Actions.<%= camelCaseName %>Request(id)),
    getAll<%= pluralName %>: (options) => dispatch(<%= name %>Actions.<%= camelCaseName %>AllRequest(options)),
    update<%= name %>: (<%= camelCaseName %>) => dispatch(<%= name %>Actions.<%= camelCaseName %>UpdateRequest(<%= camelCaseName %>)),
    reset: () => dispatch(<%= name %>Actions.<%= camelCaseName %>Reset()),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(<%= name %>EntityEditScreen)
