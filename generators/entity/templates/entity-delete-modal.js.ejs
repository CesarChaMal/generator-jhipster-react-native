import React from 'react';
import { TouchableHighlight, StyleSheet, Modal, Text, View } from 'react-native';
import { connect } from 'react-redux';

import <%= context.entityNameCapitalized %>Actions from './<%= context.entityFileName %>.reducer';

const styles = StyleSheet.create({
    centeredView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 22,
    },
    modalView: {
        margin: 20,
        backgroundColor: 'white',
        borderRadius: 20,
        padding: 35,
        alignItems: 'center',
        shadowColor: '#000',
        shadowOffset: {
            width: 0,
            height: 2,
        },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 5,
    },
    openButton: {
        backgroundColor: 'grey',
        borderRadius: 20,
        padding: 10,
        elevation: 2,
    },
    cancelButton: {
        backgroundColor: 'grey',
    },
    submitButton: {
        backgroundColor: 'red',
    },
    textStyle: {
        color: 'white',
        fontWeight: 'bold',
        textAlign: 'center',
    },
    modalText: {
        marginBottom: 15,
        textAlign: 'center',
    },
    flex: {
        flex: 1,
    },
});

function <%= context.entityNameCapitalized %>EntityDeleteModal(props) {
    const { visible, setVisible, entity, navigation } = props;

    const deleteEntity = () => {
        props.delete<%= context.entityNameCapitalized %>(entity.id);
        navigation.pop();
    };
    return (
        <Modal animationType="slide" transparent={true} visible={visible}>
            <View style={styles.centeredView}>
                <View style={styles.modalView}>
                    <Text style={styles.modalText}>Delete <%= context.entityNameCapitalized %> {entity.id}?</Text>

                    <View style={styles.flex}>
                        <TouchableHighlight style={[styles.openButton, styles.submitButton]} onPress={deleteEntity}>
                            <Text style={styles.textStyle}>Delete</Text>
                        </TouchableHighlight>
                        <TouchableHighlight
                            style={[styles.openButton, styles.cancelButton]}
                            onPress={() => {
                                setVisible(false);
                            }}>
                            <Text style={styles.textStyle}>Cancel</Text>
                        </TouchableHighlight>
                    </View>
                </View>
            </View>
        </Modal>
    );
}

const mapStateToProps = (state) => {
    return {
        <%= context.entityInstance %>: state.<%= context.entityInstancePlural %>.<%= context.entityInstance %>,
        fetching: state.<%= context.entityInstancePlural %>.fetchingOne,
        deleting: state.<%= context.entityInstancePlural %>.deleting,
        errorDeleting: state.<%= context.entityInstancePlural %>.errorDeleting,
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        get<%= context.entityNameCapitalized %>: (id) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Request(id)),
        getAll<%= context.entityNamePlural %>: (options) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>AllRequest(options)),
        delete<%= context.entityNameCapitalized %>: (id) => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>DeleteRequest(id)),
        reset<%= context.entityNamePlural %>: () => dispatch(<%= context.entityNameCapitalized %>Actions.<%= context.entityInstance %>Reset()),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(<%= context.entityNameCapitalized %>EntityDeleteModal);
