import Actions, { reducer, INITIAL_STATE } from '../../../../../app/modules/entities/<%= kebabCaseName %>/<%= kebabCaseName %>.reducer'

test('attempt retrieving a single <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>Request({ id: 1 }))

  expect(state.fetchingOne).toBe(true)
  expect(state.<%= camelCaseName %>).toBe(null)
})

test('attempt retrieving a list of <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>AllRequest({ id: 1 }))

  expect(state.fetchingAll).toBe(true)
  expect(state.<%= camelCaseNamePlural %>).toEqual([])
})

test('attempt updating a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>UpdateRequest({ id: 1 }))

  expect(state.updating).toBe(true)
})
<%_ if (searchEngine) { _%>
test('attempt searching a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>SearchRequest(1))

  expect(state.searching).toBe(true)
})
<%_ } _%>
test('attempt to deleting a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>DeleteRequest({ id: 1 }))

  expect(state.deleting).toBe(true)
})

test('success retrieving a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>Success({ id: 1 }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toBe(null)
  expect(state.<%= camelCaseName %>).toEqual({ id: 1 })
})

test('success retrieving a list of <%= camelCaseName %>', () => {
  const state = reducer(
    INITIAL_STATE,
    <%_ if (entityInfo.pagination === 'no') { _%>
    Actions.<%= camelCaseName %>AllSuccess([{ id: 1 }, { id: 2 }]),
    <%_ } else { _%>
    Actions.<%= camelCaseName %>AllSuccess([{ id: 1 }, { id: 2 }], { link: '</?page=1>; rel="last",</?page=0>; rel="first"', 'x-total-count': 5}),
    <%_ } _%>
  )

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toBe(null)
  expect(state.<%= camelCaseNamePlural %>).toEqual([{ id: 1 }, { id: 2 }])
  <%_ if (entityInfo.pagination !== 'no') { _%>
  expect(state.links).toEqual({ first: 0, last: 1 })
  expect(state.totalItems).toEqual(5)
  <%_ } _%>
})

test('success updating a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>UpdateSuccess({ id: 1 }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toBe(null)
  expect(state.<%= camelCaseName %>).toEqual({ id: 1 })
})
<%_ if (searchEngine) { _%>
test('success searching a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>SearchSuccess({ id: 1 }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toBe(null)
  expect(state.<%= camelCaseNamePlural %>).toEqual({ id: 1 })
})
<%_ } _%>
test('success deleting a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>DeleteSuccess())

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toBe(null)
  expect(state.<%= camelCaseName %>).toEqual(null)
})

test('failure retrieving a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>Failure({ error: 'Not found' }))

  expect(state.fetchingOne).toBe(false)
  expect(state.errorOne).toEqual({ error: 'Not found' })
  expect(state.<%= camelCaseName %>).toEqual(null)
})

test('failure retrieving a list of <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>AllFailure({ error: 'Not found' }))

  expect(state.fetchingAll).toBe(false)
  expect(state.errorAll).toEqual({ error: 'Not found' })
  expect(state.<%= camelCaseNamePlural %>).toEqual([])
})

test('failure updating a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>UpdateFailure({ error: 'Not found' }))

  expect(state.updating).toBe(false)
  expect(state.errorUpdating).toEqual({ error: 'Not found' })
  expect(state.<%= camelCaseName %>).toEqual(INITIAL_STATE.<%= camelCaseName %>)
})
<%_ if (searchEngine) { _%>
test('failure searching a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>SearchFailure({ error: 'Not found' }))

  expect(state.searching).toBe(false)
  expect(state.errorSearching).toEqual({ error: 'Not found' })
  expect(state.<%= camelCaseNamePlural %>).toEqual([])
})
<%_ } _%>
test('failure deleting a <%= camelCaseName %>', () => {
  const state = reducer(INITIAL_STATE, Actions.<%= camelCaseName %>DeleteFailure({ error: 'Not found' }))

  expect(state.deleting).toBe(false)
  expect(state.errorDeleting).toEqual({ error: 'Not found' })
  expect(state.<%= camelCaseName %>).toEqual(INITIAL_STATE.<%= camelCaseName %>)
})
