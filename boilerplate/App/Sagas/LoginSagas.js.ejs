import { call, put<% if (props.authType !== 'session') { %>, select<% } %> } from 'redux-saga/effects'
import LoginActions from '../Redux/LoginRedux'
import AccountActions from '../Redux/AccountRedux'

<%_ if (props.authType !== 'session') { _%>
export const selectAuthToken = (state) => state.login.authToken
<%_ } _%>
// attempts to login
export function * login (api, { username, password }) {
  <%_ if (props.authType === 'oauth2') { _%>
  const authObj = 'username=' + username + '&password=' + password + '&grant_type=password&scope=read%20write'
  <%_} else if (props.authType === 'session') { _%>
  const authObj = 'j_username=' + username + '&j_password=' + password + '&remember-me=true'
  <%_} else if (props.authType === 'uaa') { _%>
  const authObj = 'username=' + username + '&password=' + password + '&grant_type=password'
  <%_ } else if (props.authType === 'jwt') { _%>
  const authObj = {
    username: username,
    password: password,
    rememberMe: true
  }
  <%_ } _%>

  const response = yield call(api.login, authObj)

  // success?
  if (response.ok) {
    <%_ if (props.authType === 'jwt') { _%>
    yield call(api.setAuthToken, response.data.id_token)
    yield put(LoginActions.loginSuccess(response.data.id_token))
    <%_} else if (props.authType === 'session') { _%>
    yield put(LoginActions.loginSuccess(response.data))
    <%_} else if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>
    yield call(api.setAuthToken, response.data.access_token)
    yield put(LoginActions.loginSuccess(response.data))
    <%_ } _%>
    yield put(AccountActions.accountRequest())
    yield put({ type: 'RELOGIN_OK' })
  } else {
    yield put(LoginActions.loginFailure('WRONG'))
  }
}

// attempts to logout
export function * logout (api) {
  <%_ if (props.authType === 'session') { _%>
  yield call(api.logout)
  <%_ } else { _%>
  yield call(api.removeAuthToken)
  <%_ } _%>
  yield put(AccountActions.accountRequest())
  yield put(LoginActions.logoutSuccess())
  yield put({ type: 'RELOGIN_ABORT' })
}
<%_ if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>
export function * loginRefresh (api) {
  const authToken = yield select(selectAuthToken)
  if (authToken) {
    const authObj = 'refresh_token=' + authToken.refresh_token + '&grant_type=refresh_token'
    const response = yield call(api.login, authObj)

    // success?
    if (response.ok) {
      yield call(api.setAuthToken, response.data.access_token)
      yield put(LoginActions.loginSuccess(response.data))
    } else {
      yield put(LoginActions.loginFailure('WRONG'))
    }
  } else {
    yield put(LoginActions.loginFailure('WRONG'))
  }
}
<%_ } _%>
<%_ if (props.authType !== 'session') { _%>
// loads the login
export function * loginLoad (api) {
  const authToken = yield select(selectAuthToken)
  // only set the token if we have it
  if (authToken) {
    <%_ if (props.authType === 'jwt') { _%>
    yield call(api.setAuthToken, authToken)
    <%_ } else if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>
    yield call(api.setAuthToken, authToken.access_token)
    <%_ } _%>
  }
  yield put(LoginActions.loginLoadSuccess())
}
<%_ } _%>
