import { call, put, select } from 'redux-saga/effects'
import LoginActions from '../Redux/LoginRedux'
import AccountActions from '../Redux/AccountRedux'

export const selectAuthToken = (state) => state.login.id_token

// attempts to login
export function * login (api, { username, password }) {
  <%_ if (props.authType === 'oauth2') { _%>
  const authObj = 'username=' + username + '&password=' + password + '&grant_type=password&scope=read%20write'
  <%_} else if (props.authType === 'uaa') { _%>
  const authObj = 'username=' + username + '&password=' + password + '&grant_type=password'
  <%_ } else if (props.authType === 'jwt') { _%>
  const authObj = {
    username: username,
    password: password,
    rememberMe: true
  }
  <%_ } _%>

  const response = yield call(api.login, authObj)

  // success?
  if (response.ok) {
    yield call(api.setAuthToken, response.data.id_token<%_ if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>.access_token<%_ } %>)
    yield put(LoginActions.loginSuccess(response.data.id_token))
    yield put({ type: 'RELOGIN_OK' })
  } else {
    yield put(LoginActions.loginFailure('WRONG'))
  }
}

// attempts to logout
export function * logout (api) {
  <%_ if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>
  // todo I think oauth uses this?
  // const response = yield call(api.logout)
  <%_ } _%>
  yield call(api.removeAuthToken)
  yield put(AccountActions.logout())
  yield put(LoginActions.logoutSuccess())
  yield put({ type: 'RELOGIN_ABORT' })
}

// loads the login
export function * loginLoad (api) {
  const authToken = yield select(selectAuthToken)
  // only set the token if we have it
  if (authToken !== null) {
    yield call(api.setAuthToken, authToken<%_ if (props.authType === 'oauth2' || props.authType === 'uaa') { _%>.access_token<%_ } %>)
  }
  yield put(LoginActions.loginLoadSuccess())
}
