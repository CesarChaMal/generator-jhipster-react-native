import { createReducer, createActions } from 'reduxsauce'
import Immutable from 'seamless-immutable'
import { jhipsterApi } from '../Sagas'
/* ------------- Types and Action Creators ------------- */

const { Types, Creators } = createActions({
  loginRequest: ['username', 'password'],
  loginSuccess: ['id_token'],
  loginFailure: ['error'],
  logout: null
})

export const LoginTypes = Types
export default Creators

/* ------------- Initial State ------------- */

export const INITIAL_STATE = Immutable({
  id_token: null,
  error: null,
  fetching: false
})

/* ------------- Reducers ------------- */

// we're attempting to login
export const request = (state) => state.merge({ fetching: true })

// we've successfully logged in
export const success = (state, data) => {
  <%_ if (props.authType === 'oauth2') { _%>
  jhipsterApi.setAuthToken(data.id_token.access_token)
  return state.merge({ fetching: false, error: null, id_token: data.id_token })
  <%_ } else if (props.authType === 'uaa') { _%>
  const { id_token } = data.id_token
  jhipsterApi.setAuthToken(id_token)
  return state.merge({ fetching: false, error: null, id_token })
  <%_ } else if (props.authType === 'jwt') { _%>
  const { id_token } = data.id_token
  jhipsterApi.setAuthToken(id_token)
  return state.merge({ fetching: false, error: null, id_token })
  <%_ } _%>

}
// we've had a problem logging in
export const failure = (state, { error }) =>
  state.merge({ fetching: false, error })

// we've logged out
export const logout = state => {
  jhipsterApi.removeAuthToken()
  return INITIAL_STATE
}

/* ------------- Hookup Reducers To Types ------------- */

export const reducer = createReducer(INITIAL_STATE, {
  [Types.LOGIN_REQUEST]: request,
  [Types.LOGIN_SUCCESS]: success,
  [Types.LOGIN_FAILURE]: failure,
  [Types.LOGOUT]: logout
})

/* ------------- Selectors ------------- */

// Is the current user logged in?
export const isLoggedIn = (loginState) => loginState.id_token !== null
