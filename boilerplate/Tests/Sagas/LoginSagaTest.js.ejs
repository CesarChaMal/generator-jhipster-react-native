import FixtureAPI from '../../App/Services/FixtureApi'
import { call, put<% if (props.authType === 'jwt' || props.authType === 'oauth2') { %>, select<% } %> } from 'redux-saga/effects'
import { login, logout<% if (props.authType === 'jwt' || props.authType === 'oauth2') { %>, loginLoad, selectAuthToken<% } %><% if (props.authType === 'oauth2') { %>, loginRefresh<% } %> } from '../../App/Sagas/LoginSagas'
import LoginActions from '../../App/Redux/LoginRedux'
import AccountActions from '../../App/Redux/AccountRedux'

const stepper = (fn) => (mock) => fn.next(mock).value

test('login success path', () => {
  <%_ if (props.authType === 'oauth2') { _%>
  const authObj = 'username=user&password=user&grant_type=password&scope=read%20write'
  <%_} else if (props.authType === 'session') { _%>
  const authObj = 'j_username=user&j_password=user&remember-me=true'
  <%_ } else if (props.authType === 'jwt' || props.authType === 'uaa') { _%>
  const authObj = {
    username: 'user',
    password: 'user',
    rememberMe: true
  }
  <%_ } _%>
  const response = FixtureAPI.login(authObj)
  <%_ if (props.authType === 'jwt') { _%>
  const step = stepper(login(FixtureAPI, authObj))
  <%_ } else { _%>
  const step = stepper(login(FixtureAPI, {username: 'user', password: 'user'}))
  <%_ } _%>

  <%_ if (props.authType === 'jwt') { _%>
  expect(step(response)).toEqual(call(FixtureAPI.login, {username: 'user', password: 'user', rememberMe: true}))
  <%_} else if (props.authType === 'oauth2' || props.authType === 'uaa' || props.authType === 'session') { _%>
  expect(step(response)).toEqual(call(FixtureAPI.login, authObj))
  <%_ } _%>
  <%_ if (props.authType === 'jwt') { _%>
  // Set the auth token on the API
  expect(step(response)).toEqual(call(FixtureAPI.setAuthToken, response.data.id_token))
  // Store the auth token in redux
  expect(step(response)).toEqual(put(LoginActions.loginSuccess(response.data.id_token)))
  <%_} else if (props.authType === 'session' || props.authType === 'uaa') { _%>
  // Call success with the response
  expect(step(response)).toEqual(put(LoginActions.loginSuccess(response.data)))
  <%_} else if (props.authType === 'oauth2') { _%>
  // Set the auth token on the API
  expect(step(response)).toEqual(call(FixtureAPI.setAuthToken, response.data.access_token))
  // Store the auth token in redux
  expect(step(response)).toEqual(put(LoginActions.loginSuccess(response.data)))
  <%_ } _%>
  // Request the account details
  expect(step(response)).toEqual(put(AccountActions.accountRequest()))
  // Close the relogin popup if needed
  expect(step()).toEqual(put({ type: 'RELOGIN_OK' }))
})

test('login failure path', () => {
  <%_ if (props.authType === 'oauth2') { _%>
  const authObj = 'username=user&password=user2&grant_type=password&scope=read%20write'
  <%_} else if (props.authType === 'session') { _%>
  const authObj = 'j_username=user&j_password=user2&remember-me=true'
  <%_ } else if (props.authType === 'jwt' || props.authType === 'uaa') { _%>
  const authObj = {
    username: 'user',
    password: 'user2',
    rememberMe: true
  }
  <%_ } _%>
  const response = FixtureAPI.login(authObj)
  const step = stepper(login(FixtureAPI, {username: 'user', password: 'user2'}))

  // Attempt to login and fail
  expect(step(response)).toEqual(call(FixtureAPI.login, authObj))
  // Send the error
  expect(step(response)).toEqual(put(LoginActions.loginFailure('WRONG')))
})
<%_ if (props.authType === 'jwt' || props.authType === 'oauth2') { _%>
test('login load path with no token', () => {
  const step = stepper(loginLoad(FixtureAPI))
  // Attempt to select the token
  expect(step()).toEqual(select(selectAuthToken))
  // No token was found so call success
  expect(step()).toEqual(put(LoginActions.loginLoadSuccess()))
})

test('login load path with a token', () => {
  const accessToken = { access_token: 'hi' }
  const step = stepper(loginLoad(FixtureAPI))
  // Select the token from redux and set it
  expect(step(accessToken)).toEqual(select(selectAuthToken))
  expect(step(accessToken)).toEqual(call(FixtureAPI.setAuthToken, accessToken<% if (props.authType === 'oauth2') { %>.access_token<% } %>))
  FixtureAPI.setAuthToken({authToken: 'hi'})
  // The token has been set so call success
  expect(step()).toEqual(put(LoginActions.loginLoadSuccess()))
})
<%_ } _%>
test('logout success path', () => {
  const step = stepper(logout(FixtureAPI))
  <%_ if (props.authType === 'session' || props.authType === 'uaa') { _%>
  const response = FixtureAPI.logout()
  // Remove the API token
  expect(step(response)).toEqual(call(FixtureAPI.logout))
  <%_ } else { _%>
  expect(step()).toEqual(call(FixtureAPI.removeAuthToken))
  FixtureAPI.removeAuthToken()
  <%_ } _%>
  // Reset the account and logout
  expect(step()).toEqual(put(AccountActions.accountRequest()))
  expect(step()).toEqual(put(LoginActions.logoutSuccess()))
  expect(step()).toEqual(put({ type: 'RELOGIN_ABORT' }))
})
<%_ if (props.authType === 'oauth2') { _%>
test('login refresh path with success', () => {
  const step = stepper(loginRefresh(FixtureAPI))
  // Select the token from redux and set it
  expect(step()).toEqual(select(selectAuthToken))
  // console.log(step(accessToken))
  const response = FixtureAPI.login('refresh_token=valid-refresh-token&grant_type=refresh_token')
  expect(step(response.data)).toEqual(call(FixtureAPI.login, 'refresh_token=' + response.data.refresh_token + '&grant_type=refresh_token'))
  expect(step(response)).toEqual(call(FixtureAPI.setAuthToken, response.data.access_token))
  expect(step()).toEqual(put(LoginActions.loginSuccess(response.data)))
})

test('login refresh path with invalid refresh token', () => {
  const step = stepper(loginRefresh(FixtureAPI))
  // Select the token from redux and set it
  expect(step()).toEqual(select(selectAuthToken))
  // console.log(step(accessToken))
  const response = FixtureAPI.login('refresh_token=invalid-refresh-token&grant_type=refresh_token')
  expect(step(response.data)).toEqual(call(FixtureAPI.login, 'refresh_token=' + response.data.refresh_token + '&grant_type=refresh_token'))
  expect(step(response)).toEqual(put(LoginActions.loginFailure('WRONG')))
})

test('login refresh path with failure from no token', () => {
  const step = stepper(loginRefresh(FixtureAPI))
  // Select the token from redux and set it
  expect(step()).toEqual(select(selectAuthToken))
  expect(step()).toEqual(put(LoginActions.loginFailure('WRONG')))
})
<%_ } _%>
<%_ if (props.authType === 'jwt' || props.authType === 'oauth2') { _%>
test('selects the auth token', () => {
  const state = {login: {authToken: 'hi'}}
  // Retrieve the API token
  expect(selectAuthToken(state)).toEqual('hi')
})
<%_ } _%>
